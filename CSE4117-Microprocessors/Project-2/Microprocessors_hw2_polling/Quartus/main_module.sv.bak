module main_module( input clk,
                        //---input from switchboard
                        input [7:0]  switches,            //input from 16-bit switchboard
                        input  enter_key,              //enter button
                        //---output to seven segment display
                        output logic [3:0] grounds,
                        output logic [6:0] display
                                );
//memory map is defined here
localparam    BEGINMEM=12'h000,
                  ENDMEM=12'h1ff,
                  SWITCHBANK_DATA=12'h900,
                  SWITCHBANK_STATUS=12'h901,
                  SEVENSEG=12'hb00;
//  memory chip
logic [15:0] memory [0:127]; 
 
// cpu's input-output pins
logic [15:0] data_out;
logic [15:0] data_in;
logic [11:0] address;
logic memwt;
//======ss7 and switchbank=====
logic [15:0] ss7_out, switch_in;
logic ackx;
sevensegment ss1(.datain(ss7_out),.grounds(grounds),.display(display),.clk(clk));
switchbank_poll  sw1(.clk(clk), .switches(16'(switches)), .enter_key(enter_key), .a0(address[0]), .ack(ackx), .data_out(switch_in));
bird br1 (.clk(clk),.data_in(data_in), .data_out(data_out),.address(address),.memwt(memwt));
//multiplexer for cpu input
always_comb
begin
ackx =0;
    if ( (BEGINMEM<=address) && (address<=ENDMEM) )
        begin
            data_in=memory[address];
        end
          else if ((address==SWITCHBANK_STATUS)|| (address==SWITCHBANK_DATA))
            begin
                 ackx = 1;              //with appropriate a0 resets the ready flag    
                 data_in = switch_in;   //a0 will determine if we read data or status
            end
    else
        begin
            data_in=16'hf345; //any number
        end
end
//multiplexer for cpu output 
always_ff @(posedge clk) //data output port of the cpu
    if (memwt)
        if ( (BEGINMEM<=address) && (address<=ENDMEM) )
            memory[address]<=data_out;
        else if ( SEVENSEG==address) 
            ss7_out<=data_out;
            
initial 
    begin
        ss7_out=0;
        $readmemh("ram.dat", memory);
    end
endmodule