module seven_segment(grounds, display, clk);

output logic [3:0] grounds;
output logic [6:0] display;
input clk; 

logic [3:0] data [0:3];  //number to be printed on display
logic [1:0] count;       //which data byte to display.
logic [25:0] clk1;

always_ff @(posedge clk1[15])    //25 slow //19 wavy //15 perfect
begin
    grounds<={grounds[2:0],grounds[3]};
    count<=count+1;              //which hex digit to display
end

always_ff @(posedge clk)
    clk1<=clk1+1;
	 
always_comb 
begin
    case (data[count])
      4'h0: display = 7'b1111110; //starts with a, ends with g
      4'h1: display = 7'b0110000;
      4'h2: display = 7'b1101101;
      4'h3: display = 7'b1111001;
      4'h4: display = 7'b0110011;
      4'h5: display = 7'b1011011;
      4'h6: display = 7'b1011111;
      4'h7: display = 7'b1110000;
      4'h8: display = 7'b1111111;
      4'h9: display = 7'b1111011;
      4'hA: display = 7'b1110111;
      4'hB: display = 7'b0011111;
      4'hC: display = 7'b1001110;
      4'hD: display = 7'b0111101;
      4'hE: display = 7'b1001111;
      4'hF: display = 7'b1000111;
      default: display = 7'b1111111;
    endcase
end

initial begin
    data[0]=4'h1;
    data[1]=4'h9;
    data[2]=4'ha;
    data[3]=4'hc;
    count = 2'b0;
    grounds=4'b1110;
    clk1 = 26'h0; // Corrected the width to match the declaration
end

endmodule